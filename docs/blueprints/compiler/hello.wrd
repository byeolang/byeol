import console.cout

def Hello
    def _A from proxy
        _@ctor(): cout('A()')
        @dtor() // function can has empty body.

        num{} _foo(num max, num min) // does nothing.

        _age := num{}()
        getAge := prop from num(5)
            got => @get
                retfun this.age + got
            @set(num new)=>
                age = new
                //for n in 2..5 -> keywords which can have block stmt exception func should have its body.
        name := prop() from str('defaultName')

    _b := def _$B() from A
        $got=>num{} _foo(num max, num min)
            retfun 1..max

        $res := num if a > 0.3 & a < 5
            if 33 > (for n in 3..5
                2*n
            )
                b1 := for n in 3..5 * foo(): 2*n
                @err(rNull r)
                    cout('err(rNull)')

                if true
                    a := for a in 2..foo(5)
                        dn = a + 3
                        if dn == 0
                            again
                else
                    retfun 0

        // comment.
        elif a == 5 /* also, comment */
            with dn
                cout('a=' + a)
                (out dn, dmap) := (num{}{str} {1, 2, foo(3)}, num{str} {3:'banana', 3: 'apple'})
                len // dn.len
            dn?.each(foo(n))

        elif a == 7 | a== 6
            ret a = 0

        else
            retif d

def unit
    name := prop from num
        @get: 'unit' + objName()
        _@set
    res init()

def key from unit
    @ctor(char newValue, num newStroke)
        value = newValue
        stroke = newStroke

    void type()
        cout('user types $value with $stroke stroke.')

    _value := 'a'
    _stroke := 0.0

def row from key{}

    _end := _start := 'a'

    @ctor(char newStart, char newEnd)
        start = newStart
        end = newEnd

    res init()
        stk = 0.0
        for c in end..start
            add(key(c, stk += 0.1))
        ret rOk

def keyboard from row{}
    res init()
        add(row('0', '9'))
        add(row('q', ']'))
        add(row('a', ';'))
        add(row('z', '/'))

        res := rOk
        for r in this
            res += r.init()
        ret res

def app
    void main()
        keyboard.init()

//import console.out.prnum

def global
    suits := ['Hearts', 'Diamonds', 'Spades', 'Clubs']
    ranks := ['Two', 'Three', 'Four']
    values := ['Two':2, 'Three':3, 'Four':4]
    playing := true

def card
    @ctor(str nsuit, str nrank)
        suit = nsuit
        rank = nrank

    _suit := ''
    _rank := ''

def +str
    @ctor(@card): ret '$card.rank of $card.suit'
    @ctor(@cards)
        toRet := ''
        ret for c in cards
            toRet += '\n ${str c}'

def hand
    _cards := str{}()
    _value := _aces := 0

    void addCard(@card)
        cards.add(card)
        value := values[card.rank]

    void adjustForAce()
        for value > 21 & aces
            value -= 10
            aces -= 1

def deck
    @ctor()
        for s in suits: for r in ranks: cards.add(card(s, r))

    void shuffle(): random.shuffle(deck)
    void deal(): retfun deck.pop()

    _cards := str{}()

import system
