//	#######################
//	 Samples for Worldlang
//	#######################
//			kniz <kniz.net>
//			2018 Mar 30

//	this is comment.


//	#1 Hello, World:
import Console

class Application
	result main()
		return Console.print("Hello, World\n")


//	#2 args, array, for-in, sequence:
class Application
	//	main method:
	//		World automatically find Application class and creates object from it and triggers main method.
	// 		if you mention params on your main methods, World fill it in with what retrived from user. otherwise, it just call it without.
	// 		however, return-type must be result.
	result main(string[] args) 
		Console.print("will loop " + args.getLength() " times.\n")
		for int n in {args.getLength()}
			Console.print(args[n])
		return success;


//	#3 class basics:
class Foo
	int age // member variable
	//	pretype:
	//		consists of some objects and containers.
	//		as object:		int, float, string, result, void, char
	//		as container:	array, sequence
	float grade = 4.5 // can be initilized inline.
	//	accessor:
	//		all identifier(including variable, method and class) which starts with prefix _(underscore) are same as defined private accessor.
	string _name = "christmas girl alone"
	void printName()
		Console.println("my name is " + _name)
		Console.print(", and age is " + age)
	
class Application
	result main()
		Foo foo
		foo.age = 18 // ok.
		foo.grade = 1.8 // ok.
		foo._name = "foo" // err. it's private member variable.
		foo.printName()

		//	instantiation:
		int a3
		int a3_1 = 0
		int a3_2(0), a3_3 = int(0) // all of a3s are same.		
		
		return success

//	#4 byval, byref policy:
class Foo
	int age = 5
	void print()
		Console.println("age = " + age)

class Application
	result main(string[] args)
		int a1 = 0, a2 = a1
		a1 = 5
		if a1 == a2
			return error

		Foo foo1, foo2 = foo1
		foo1.age = 20
		if foo2.age != 20
			return error

		foo2 = Foo()
		foo1.age = 10
		if foo2.age == 10
			return error
		return success
	
