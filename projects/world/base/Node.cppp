#include "Node.hpp"

namespace wrd
{
#define THIS Node
	WRD_CLASS_DEF(Node)

	const Str& getName() const;
	Str& getName();
	Strong clone() const {
		return _clone();
	}
	virtual Res& _onInitNodes(Container& tray) { return wasgood; }
	virtual wbool isOccupy() const {
		return getClass()::isOccupy();
	}
	virtual const Container& getNodes() const = 0;
	//	get(); 는 공개하지 않는다:
	//		사용자는 Container채로 받게 되면 밖에서 remove, insert를 할 수 있게 된다.
	Container& _getNodes() {
		return const_cast<Container&>(getNodes());
	}
	Container& _get() {
		return const_cast<Container&>(get());
	}
	//	getNodes:
	//		모든 Container의 index는 World와 Native모두 1부터 시작한다.
	//		invisible하다.
	Node& operator[](widx n) { return get(n); }
	const Node& operator[](widx n) const { return get(n); }
	Node& get(widx n) {
		WRD_IS_THIS(Node)
		return _getNodes()[n];
	}
	const Node& get(widx n) const {
		WRD_IS_THIS(Node)
		return getNodes()[n];
	}
	virtual Refer use(Msg& msg) {
		// TODO: Nodes들을 검색해서 msg를 canUse인지 체크할것.
	}
	virtual Refer use(Msg& msg) const = 0;
	virtual wbool isConst() const { return false; }
	virtual const Origin& getOrigin() const {
		static Origin inner;
		return inner;
	}
	Node& get(const Str& name) {
		return _get(false, [&name](Node& e) { return e.getName() == name; });
	}
	const Node& get(const Str& name) const {
		WRD_UNCONST()
		return unconst._get(true, [&name](Node& e) { return e.getName() == name; });
	}
	Node& _get(wbool want_const, std::function<wbool(Node&)> tester) {
		WRD_IS_THIS(Node)
		WRD_ARE_NULL(nulr<Node>(), msg, members)

		Node* found = NULL;
		if(_getNodes().each<T>([&found, want_const, tester](Node& e) {
			if(e.isConst() != want_const) return wasgood;
			if( ! tester(e)) return wasgood;
			if(found)
				return Duplicated.err(".."); // if ret isn't Success, it means that stop eaching.
			
			found = &e;
			return wasgood; // means keep eaching.
		}))
			return wasdup.err(".....").returns(nulr<Node>());

		return *found;
	}
	virtual wbool canUse(const Msg& msg) const {
		return msg.getName() == getName();
	}
	virtual wbool isStatic() const { return false; }
}
