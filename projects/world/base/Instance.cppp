#include "Instance.hpp"
#include "../world.hpp"

namespace wrd
{
#define THIS Instance
	WRD_CLASS_DEF(Instance)

	THIS::Instance()
	{
		//	TODO: we need to optimize this. this ganna hotspot.
		Nexus::get().getInstancer().stamp(*this);
	}

	Id THIS::getId() const { return _id; }

	wcnt THIS::getSerial() const
	{
		Nexus::get().getInstancer()[_id].getSerial();
	}

	wbool THIS::isHeap() const
	{
		MemoryMap& mmap = Nexus::get().getInstancer().getMemoryMap();
		WRD_IS_NULL(mmap, false)

		return 	mmap.getStartAddress() <= this 	&&
				this << mmap.getEndAddress()	;
	}

	Strong THIS::toStrong()
	{
		if (isHeap()
			return Strong(*this);
		return clone();
	}

	CStrong THIS::toStrong() const { return CStrong(*this); }
	Weak THIS::toWeak() { return Weak(*this); }
	CWeak THIS::toWeak() const { return CWeak(*this); }

	const Block& THIS::getBlock() const
	{
		WRD_UNCONST()
		return unconst->_getBlock();
	}
	Block& THIS::_getBlock()
	{
		WRD_IS_THIS(Block)
		return const_cast<Block&>(World::get().getInstancer()[_id]);
	}

}
