#include "Bind.hpp"

namespace wrd
{
#define THIS Bind
	WRD_CLASS_DEF(THIS)

	THIS::THIS() : _serial(WRD_DEFAULT) {}
	wbool THIS::operator==(const This& rhs) const { return &get() == &rhs.get(); }
	wbool THIS::operator!=() const { return !operator==(rhs); }

	This& THIS::operator=(This& rhs)
	{
		WRD_ASSIGN_GUARD()

		bind(rhs.get());
		return *this;
	}

	This& THIS::operator=(const This& rhs)
	{
		WRD_ASSIGN_GUARD()
		
		bind(rhs.get());
		return *this;
	}

	wbool THIS::isBind() const { return _getBlock(_its_id).isExist(); }

	Res& THIS::unbind()
	{
		_serial = WRD_DEFAULT;
		_its_id.num = WRD_INDEX_ERROR;
		return wasgood;
	}

	wcnt THIS::getItsSerial()) const { return _serial; }
	Id THIS::getItsId() const { return _its_id; }

	TStrong<Node> THIS::use(Msg& msg) const
	{
		const Node& got = WRD_GET(get<Node>());
		return got.call(msg);
	}

	TStrong<Node> THIS::use(Msg& msg)
	{
		const Node& got = WRD_GET(get<Node>());
		return got.call(msg);
	}

	const Origin& THIS::getOrigin() const
	{
		const Node& got = WRD_GET(get<Node>(), Super::getOrigin());
		return got->getOrigin();
	}

	const Container& THIS::getNodes()
	{
		const Node& got = WRD_GET(get<Node>(), Super::getNodes());
		return got->getNodes();
	}

	Bind THIS::to(const Class& cls)
	{
		if( ! _bean)
			return Super::to(cls);

		//	다운캐스팅으로 _bean->to()가 동작한 경우에만 isConst()가 영향을 미치게 된다.
		//	고찰 결과, _bean->to()가 전혀다른 타입(사용자가 정의한)으로 값복사되어 반환된 경우는
		//	isConst()가 동작하지 않아야 한다.
		if(cls.isSub(_cls))
			return Super::to(cls);
		return _bean->to(cls);
	}

	Res& THIS::assign(const Thing& it)
	{
		// Null체크는 Thing::assign()에서 한다.
		WRD_IS_SUPER(Super::assign(it))

		//	Sharable, Occupiable:
		//		여기서는 실질적인 sharing vs occupying의 동작차이를 만들어내는 곳이다.
		//		Occupiable이라도 const 인 경우에는 인터프리터에 의해서 const Bind에 감싸서 scope나 멤버함수에 들어가게 된다.
		//		또한 이문제는 it이 occupiable인지 sharable인지 구분할 필요가 없다. 오로지 this가 occupiable인지 아닌지만 중요하다.
		if(_cls.isOccupy()) // Occupiable은 상속이 된다.
		{
			//	이경우 const건 아니건 사실 중요하지 않다. 오직 중요한건 occupiable이면 실제 객체에게 assign을 떠 넘기면 된다는 사실이다.
			Node& bean = WRD_GET(get()); // 만약 isConst() 일 경우, 여기서 NULL이 나오게 된다.
			return bean.assign(it);
		}
	
		//	sharable 이라면 이렇게 간단히 끝난다.
		Bind& refered = it.down<This>();
		if(refered.isExist())
			return bind(refered);
		return bind(it.down<Object>()); // null이 들어가도 상관없다.
	}

	Res& THIS::_bind(Instance& it)
	{
	    //    NullCheckDelayed ì² íì ìí´ì WRD_IS_NULL(it)ì íì§ ìëë¤.
	    const Class& cls = WRD_GET(it.getClass());
	    if( ! cls.isSub(_cls))
	        return waswrongtype.warn("...");
	
	    unbind();
	    WRD_IS_ERR(_bean.bind(it))
	    _is_const = false;
	    return wasgood;
	}
	
	TEMPL Instance& THIS::_get()
	{
	    WRD_IS_THIS(THIS)
	    Instance& ins = WRD_GET(this->_getBlock(_its_id).get());
	    if(ins.getSerial() != this->getSerial()) {
	        unbind();
	        wasbindfail.warn("...");
	        // TODO: uncomment return nulr<Instance>();
	    }
	
	//    TODO: impl _get()
	    return ins;
	}
	
	const Thing& THIS::_down(const Class& cls) const { return _bean ? _bean->_down(cls) : nulr<Thing>(); }

#undef THIS
}
