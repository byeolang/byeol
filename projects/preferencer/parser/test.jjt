// Copyright 2011 Google Inc. All Rights Reserved.
// Author: sreeni@google.com (Sreeni Viswanadha)

/* Copyright (c) 2006, Sun Microsystems, Inc.
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *     * Redistributions of source code must retain the above copyright notice,
 *       this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the Sun Microsystems, Inc. nor the names of its
 *       contributors may be used to endorse or promote products derived from
 *       this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGE.
 */

options {
  OUTPUT_LANGUAGE = "c++";
  NAMESPACE = "NE";
  //TOKEN_MANAGER_SUPER_CLASS = "TokenManagerSuper";
  //PARSER_INCLUDES = "myparser.h";
  //PARSER_SUPER_CLASS = "Parser";
  //TOKEN_EXTENDS = "Token";
  //TOKEN_INCLUDES = "token_base.h";
}

PARSER_BEGIN(HelloParser)

PARSER_END(HelloParser)




//////////////////////////////////////
//  syntax:                         //
//////////////////////////////////////
TOKEN:
{
    <EOL:"\n" | "\r" | "\r\n"> // end of line
|   <WHITESPACE:<EOL> | " " | "\t">
|   <WHITESPACES:(<WHITESPACE>)+>
|   <INTEGER:(["0" - "9"])+ >
|   <PLUS:"+">
|   <MINUS:"-">
|   <OPERATOR:<PLUS> | <MINUS>>
}



//////////////////////////////////////
//  sementic:                       //
//////////////////////////////////////
int start() : {Token *x, *y;}
{
    x=<INTEGER> "+" y=<INTEGER> <EOL>
    {
        return std::stoi(x->image.c_str()) + std::stoi(y->image.c_str());
    }
}