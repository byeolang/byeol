Versioning
	버전은 3자리 + 알파(a)/베타(b)/감마(g)/정식 + 빌드횟수 으로 표시한다.

	major.minor.maintenance(a/b/g/'none')

	빌드 횟수는 따로 명기하고 버전 자체는 포함시키지 않는다.
	

Major
	시스템 전체적인 큰 변혁이 왔을때 올린다. 아키텍쳐나 설계구조가 크게 변경되어
	기존 버전과 확일한 차이가 나타나거나, 호환이 안좋을 경우에 사용한다.
	대략적으로 1~2년에 한번 정도의 사이클을 가지도록 한다.
	
	
Minor
	기능 변화(즉, 업데이트)가 존재하나, 설계/아키텍쳐를 갈아엎는식의 거창한	변화가 아니라
	소소한 변화. 또는 기존의 관점/설계를 그대로 이어받으면서 추가해가는 식일때 사용한다.
	
	
Maintenance
	기능 변화가 아니라, bugfix 혹은 3~4시간 정도만에 해결 가능한 작은 기능추가에 관해서만
	사용한다.


Major의 업데이트
	Major는 코드양이 크기 때문에 가 한번에 업데이트 되는 경우는 드물고, Minor 업데이트가
	되는 동안 Major 업데이트도 내부적으로 수행한다. 다만 표기는 완성시점에서 표기를 한다.
	Minor 업데이트가 수행되는 동안에는 되도록이면 Major 업데이트 내용을 포함시키지 않았으면
	좋겠다.
	어쩔수 없다면 기능을 포함시키고, 명세만 하지 않는 쪽으로 가야겠지만.


Maintenance와 Minor가 같이 발생한다면?
	큰쪽은 작은 쪽을 포함한다. 따라서 이경우 Minor+1이 될것이다.
	또한 큰 쪽의 업데이트가 진전되면 작은 쪽의 업데이트는 모두 0으로 초기화 된다.
	(알파/베타/감마는 별도 표기)
	
	
알파/베타/감마/정식
	이 소프트웨어가 "얼마나 미완성인가"를 단적으로 표현해주기 위해서 사용한다.
	어느정도 자리를 잡았다고 판단되는 정식버전에서는 알파,베타 부분이 표기가 되지 않는다.
	지금생각으로는 알파에서 베타까지 약 1년. 베타에서 감마까지 약 1년 정도로 보고있다.
	
	
모듈과 커널의 versioning
	커널과 모듈은 각기 다른 서브시스템이다. 고로 서브시스템의 versioning은 각자달라야 한다.
	외부로 보여주는 건 전체 시스템의 versioning 이다.
	전체시스템이 0.0.1이지만, 모듈은 1.0.0일수도 있고 반대일수도 있다.