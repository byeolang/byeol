개요	:
	Kernal:: 전역 함수 공간에 Editor 전역공간을 추가함.
	Editor 전역공간에서 Kernal의 ADT를 원격 조정함.
	Editor 전역 공간에 추가될 ADT는 다음과 같음
		1. NEScriptEditor
		2. NEEventHandler
		3. NEPanelManager
	Editor에서는 Kernal::스크립트 매니져에 에디트와 관련된 스크립트를 넣고 시작한다.
	그러면 Editor의 ADT를 통해서 해당 스크립트에 접근이 가능하다.
		
사용이유:
	왜 스위칭을 하는가.
	
		"에디트 중에도 테스트 런이 필요하기 때문이다.
		문제는 이를 어떻게 하는가."
	
		Editor에도 노드매니져, 스크립트 매니져를 포함시키는 방법이있다.
		그런데 이렇게 하면 Editor에도 따로 노드매니져와 스크립트 매니져를 생성하게되면 추가적으로 만들어야 하는
		클래스들이 늘어남. (예를 들면 EditNode와 EditNodeSelector들)
		
		커널을 사용할려면 setInstance()를 통해서 등록되어야만 한다.
		등록이 되지 않은 커널의 주소도 가지고 있는 것이 가능하나. 초기화조차 불가능하다.
		다시말하면, "그냥 갖고 있는 건 된다" 라는 게 된다.
		그래서 커널을 2개 들고, 하나는 "에디터용 스크립트가 들어있는 커널", 하나는 "테스트
		실행이 들어있는 커널" 로 들고 있는다.
		그리고 테스트를 실행하고자 하면, "테스트 실행이 들어있는 커널로 바꿔치기 한다.
		
문제점	:
	현재 커널::setInstance()에서는 주입된 커널을 clone()을 통해서 복사 한뒤 삽입하는 과정을	
	거치는데?
	
		해결방법:
			1. 커널의 setInstancePointer() 로 바꾸고, 들어온 포인터 주소를 대입하는 방법 
			으로 한다.
				단점	:
					1.	여지껀 노드 시스템에서는 "포인터를 그대로 대입 하는 public 인터페이스"
						가 존재하지 않는다. -----> 일관성이 깨짐
					2.	releaseInstance() 에서는 어떻게 할 건가. 주입된 포인터가 stack에서
						나온 인스턴스의 주소인지, heap에서 나온 주소인지 모른다.
					3.	stack에서 나온 포인터를 할당한다면, 인스턴스가 도중에 사라지는 일도
						생길 수 있다.
						
			2. protected로 _setInstancePointer()를 만들어서 이를 friend로 공개하는 별도의 
			ADT 혹은 NEEventHandler를 만든다.
				단점	:
					1.	friend의 남발. 예외상황을 만드는 건 좋지 않다.
					2.	
					
			3. 1번에서 setInstance()와 병행.
				단점	:
					1.	
		
상세	:
