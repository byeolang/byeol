# verified to run clang-tidy v18.1.8
#
# some of these checkers are disabled because it's harmful to implement feature fast.
# they are mostly,
#   * relative to type issues(sign, unsigned, overflow, ...)
#   * cost pretty much time to fix (recursion, virtual call in ctor, ...)
#   * probably occurs in a chance of very rarely.
#   * false positive.
#   * it's about a nullable reference.
#
# when the project goes into sustainable state, and more people get involved,
# then I can set all of them to enable.
#
# oh! and don't use '#' at the end of line. and middle of `Checks`. it's only allowed to use justvery
# very in front of a line.
#
# history:
#   2025-03-17: fix typo and remove deprecated option for clang-tidy v18.1.8.
#
# TODO:
# add clang-analyzer-core.uninitialized.UndefReturn,
#     clang-analyzer-core.NonNullParamChecker,
#     cppcoreguidelines-avoid-const-or-ref-data-members,
Checks: |
  -*,
  -clang-diagnostic-error,
  clang-analyzer-apiModeling.Errno,
  clang-analyzer-apiModeling.TrustNonnull,
  clang-analyzer-apiModeling.TrustReturnsNonnull,
  clang-analyzer-apiModeling.google.GTest,
  clang-analyzer-apiModeling.llvm.CastValue,
  clang-analyzer-apiModeling.llvm.ReturnValue,
  clang-analyzer-core.BitwiseShift,
  clang-analyzer-core.CallAndMessage,
  clang-analyzer-core.CallAndMessageModeling,
  clang-analyzer-core.DivideZero,
  clang-analyzer-core.DynamicTypePropagation,
  clang-analyzer-core.NonnilStringConstants,
  clang-analyzer-core.NullDereference,
  clang-analyzer-core.StackAddrEscapeBase,
  clang-analyzer-core.StackAddressEscape,
  clang-analyzer-core.UndefinedBinaryOperatorResult,
  clang-analyzer-core.VLASize,
  clang-analyzer-core.builtin.BuiltinFunctions,
  clang-analyzer-core.builtin.NoReturnFunctions,
  clang-analyzer-core.uninitialized.ArraySubscript,
  clang-analyzer-core.uninitialized.Assign,
  clang-analyzer-core.uninitialized.Branch,
  clang-analyzer-core.uninitialized.CapturedBlockVariable,
  clang-analyzer-core.uninitialized.NewArraySize,
  clang-analyzer-cplusplus.InnerPointer,
  clang-analyzer-cplusplus.Move,
  clang-analyzer-cplusplus.NewDelete,
  clang-analyzer-cplusplus.NewDeleteLeaks,
  clang-analyzer-cplusplus.PlacementNew,
  clang-analyzer-cplusplus.PureVirtualCall,
  clang-analyzer-cplusplus.SelfAssignment,
  clang-analyzer-cplusplus.SmartPtrModeling,
  clang-analyzer-cplusplus.VirtualCallModeling,
  clang-analyzer-deadcode.DeadStores,
  clang-analyzer-fuchsia.HandleChecker,
  clang-analyzer-nullability.NullPassedToNonnull,
  clang-analyzer-nullability.NullReturnedFromNonnull,
  clang-analyzer-nullability.NullabilityBase,
  clang-analyzer-nullability.NullableDereferenced,
  clang-analyzer-nullability.NullablePassedToNonnull,
  clang-analyzer-nullability.NullableReturnedFromNonnull,
  clang-analyzer-optin.core.EnumCastOutOfRange,
  clang-analyzer-optin.cplusplus.UninitializedObject,
  clang-analyzer-optin.mpi.MPI-Checker,
  clang-analyzer-optin.osx.OSObjectCStyleCast,
  clang-analyzer-optin.osx.cocoa.localizability.EmptyLocalizationContextChecker,
  clang-analyzer-optin.osx.cocoa.localizability.NonLocalizedStringChecker,
  clang-analyzer-optin.performance.GCDAntipattern,
  clang-analyzer-optin.performance.Padding,
  clang-analyzer-optin.portability.UnixAPI,
  clang-analyzer-osx.API,
  clang-analyzer-osx.MIG,
  clang-analyzer-osx.NSOrCFErrorDerefChecker,
  clang-analyzer-osx.NumberObjectConversion,
  clang-analyzer-osx.OSObjectRetainCount,
  clang-analyzer-osx.ObjCProperty,
  clang-analyzer-osx.SecKeychainAPI,
  clang-analyzer-osx.cocoa.AtSync,
  clang-analyzer-osx.cocoa.AutoreleaseWrite,
  clang-analyzer-osx.cocoa.ClassRelease,
  clang-analyzer-osx.cocoa.Dealloc,
  clang-analyzer-osx.cocoa.IncompatibleMethodTypes,
  clang-analyzer-osx.cocoa.Loops,
  clang-analyzer-osx.cocoa.MissingSuperCall,
  clang-analyzer-osx.cocoa.NSAutoreleasePool,
  clang-analyzer-osx.cocoa.NSError,
  clang-analyzer-osx.cocoa.NilArg,
  clang-analyzer-osx.cocoa.NonNilReturnValue,
  clang-analyzer-osx.cocoa.ObjCGenerics,
  clang-analyzer-osx.cocoa.RetainCount,
  clang-analyzer-osx.cocoa.RetainCountBase,
  clang-analyzer-osx.cocoa.RunLoopAutoreleaseLeak,
  clang-analyzer-osx.cocoa.SelfInit,
  clang-analyzer-osx.cocoa.SuperDealloc,
  clang-analyzer-osx.cocoa.UnusedIvars,
  clang-analyzer-osx.cocoa.VariadicMethodTypes,
  clang-analyzer-osx.coreFoundation.CFError,
  clang-analyzer-osx.coreFoundation.CFNumber,
  clang-analyzer-osx.coreFoundation.CFRetainRelease,
  clang-analyzer-osx.coreFoundation.containers.OutOfBounds,
  clang-analyzer-osx.coreFoundation.containers.PointerSizedValues,
  clang-analyzer-security.FloatLoopCounter,
  clang-analyzer-security.cert.env.InvalidPtr,
  clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling,
  clang-analyzer-security.insecureAPI.SecuritySyntaxChecker,
  clang-analyzer-security.insecureAPI.UncheckedReturn,
  clang-analyzer-security.insecureAPI.bcmp,
  clang-analyzer-security.insecureAPI.bcopy,
  clang-analyzer-security.insecureAPI.bzero,
  clang-analyzer-security.insecureAPI.decodeValueOfObjCType,
  clang-analyzer-security.insecureAPI.getpw,
  clang-analyzer-security.insecureAPI.gets,
  clang-analyzer-security.insecureAPI.mkstemp,
  clang-analyzer-security.insecureAPI.mktemp,
  clang-analyzer-security.insecureAPI.rand,
  clang-analyzer-security.insecureAPI.strcpy,
  clang-analyzer-security.insecureAPI.vfork,
  clang-analyzer-unix.API,
  clang-analyzer-unix.DynamicMemoryModeling,
  clang-analyzer-unix.Errno,
  clang-analyzer-unix.Malloc,
  clang-analyzer-unix.MallocSizeof,
  clang-analyzer-unix.MismatchedDeallocator,
  clang-analyzer-unix.StdCLibraryFunctions,
  clang-analyzer-unix.Vfork,
  clang-analyzer-unix.cstring.BadSizeArg,
  clang-analyzer-unix.cstring.CStringModeling,
  clang-analyzer-unix.cstring.NullArg,
  clang-analyzer-valist.CopyToSelf,
  clang-analyzer-valist.Uninitialized,
  clang-analyzer-valist.Unterminated,
  clang-analyzer-valist.ValistBase,
  clang-analyzer-webkit.NoUncountedMemberChecker,
  clang-analyzer-webkit.RefCntblBaseVirtualDtor,
  clang-analyzer-webkit.UncountedLambdaCapturesChecker,
  cppcoreguidelines-avoid-capturing-lambda-coroutines,
  cppcoreguidelines-avoid-reference-coroutine-parameters,
  cppcoreguidelines-explicit-virtual-functions,
  cppcoreguidelines-interfaces-global-init,
  cppcoreguidelines-macro-to-enum,
  cppcoreguidelines-misleading-capture-default-by-value,
  cppcoreguidelines-missing-std-forward,
  cppcoreguidelines-no-suspend-with-lock,
  cppcoreguidelines-noexcept-destructor,
  cppcoreguidelines-noexcept-move-operations,
  cppcoreguidelines-noexcept-swap,
  cppcoreguidelines-pro-type-const-cast,
  cppcoreguidelines-pro-type-static-cast-downcast,
  cppcoreguidelines-rvalue-reference-param-not-moved,
  cppcoreguidelines-use-default-member-init,
  cppcoreguidelines-virtual-class-destructor,
  misc-confusable-identifiers,
  misc-coroutine-hostile-raii,
  misc-definitions-in-headers,
  misc-header-include-cycle,
  misc-misleading-bidirectional,
  misc-misleading-identifier,
  misc-misplaced-const,
  misc-non-copyable-objects,
  misc-redundant-expression,
  misc-static-assert,
  misc-throw-by-value-catch-by-reference,
  misc-uniqueptr-reset-release,
  misc-unused-alias-decls,
  misc-unused-using-decls,
  performance-avoid-endl,
  performance-enum-size,
  performance-faster-string-find,
  performance-for-range-copy,
  performance-implicit-conversion-in-loop,
  performance-inefficient-algorithm,
  performance-inefficient-string-concatenation,
  performance-inefficient-vector-operation,
  performance-move-const-arg,
  performance-move-constructor-init,
  performance-no-automatic-move,
  performance-no-int-to-ptr,
  performance-noexcept-destructor,
  performance-noexcept-move-constructor,
  performance-noexcept-swap,
  performance-trivially-destructible,
  performance-type-promotion-in-math-fn,
  performance-unnecessary-copy-initialization,
  performance-unnecessary-value-param,
  portability-restrict-system-includes,
  portability-simd-intrinsics,
  portability-std-allocator-const

WarningsAsErrors: true
HeaderFilterRegex: ''
FormatStyle: none
CheckOptions:
# these are default values of clang-tidy
  - key:             cppcoreguidelines-non-private-member-variables-in-classes.IgnoreClassesWithAllMemberVariablesBeingPublic
    value:           'true'
