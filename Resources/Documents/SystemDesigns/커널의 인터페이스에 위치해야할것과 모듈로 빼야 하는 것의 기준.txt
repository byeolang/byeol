설명:	
	커널에는 필수모듈에 대한 인터페이스가 존재한다. 이 인터페이스를 커널팩토리
	가 연결해서 커널을 만들어 내는 식으로 사용하게 되는데, 그렇다면 문제는
	커널인터페이스에서 필수모듈에 대해 어디까지 구현을 하게 되는 가 이다
	
분석:
	크게 3가지 경우를 따져볼 수 있다.
		1.	아주 최소한의 인터페이스만 (= 구현 없음) 커널에 구현해 놓고, 실제 구현은 필수
			모듈에 전부 구현 해 놓는다.
		2.	필수모듈과 커널에 적당히 반반씩 구현을 해놓는다. 이때, 코드가 중복될 가능성이 
			있는(= 즉, 커스텀 모듈에서도 재사용할 가능성이 높은) 내용은 커널에 빼놓는 식
			이다. 또한, 내부 클래스들도 놓여지게 될것이다.
		3.	모든 필수모듈의 내용을 커널에 미리 구현을 해 놓는다. 만약, 커스톰 모듈을 사용
			하는 경우라면 일부의 함수만 재정의하는 것만으로도 사용이 가능하다.
	
	효율성으로만 놓고 생각해보자.
	그렇다면 1번이 가장 우수하다. 왜냐하면, 2, 3번의 경우는 "커스톰 모듈은 항상 커널 모듈
	을 사용한다" 라고 하는 전제가 있기 때문이다. 그렇지 않은 경우도 물론 있을 수 있고, 
	만약 그렇다면, 커널의 코드가 2개 존재하게 되므로 낭비다.
	
	다음은 개발편의를 놓고 생각해보자.
	3번이 가장 우수하다. 다 구현할 필요없이 커널 클래스를 상속받아서 필요한 부분만 재정의
	를 하면 된다.
	하지만 1, 2번 같은 경우도, 표준필수모듈을 DLL 링킹해서 상속받으면 그만이므로(= 단, 표
	준필수모듈 개발자가 헤더와 LIB, DLL 파일을 모두 공유한다는 가정하에) 어느정도 단점을 
	극복 할 수 있을 것이다.
	
	개발구현 난이도에 대해 생각해보자.
	전체적으로 비슷한 난이도를 띌것이다. 다만 아무래도 커널을 외부로 빼놓으면 디버깅이 조
	금은 어려워 질 수 있다. 왜냐하면 커널이 외부로 가있게 되면서 생기는 부조리를 따로 처리
	해야 하기 때문이다. 하지만 전체적으로는 비슷할 것이다.
	한가지 문제점이라면 2번인데, 이 2번에 놓이게되는 기준이 명확하지 않다. 
	
결론:
	여러가지 측면에서 보면, 1번이 가장 합당해보인다.
	차선책인 2번과 3번은 비슷하다.
	
발생 예측 가능한 문제점:
	1번을 사용할시 발생할 문제점들을 예측해본다.
		1.	인터페이스만 구현해 놓는다고 한다면, ADT를 의미할 것이다. 만약 이 ADT를 다른 
			클래스에서 사용하게 되는 경우는 없는가? (= 즉, ADT라면 컴파일이 안될것이다)
			
		->	보통 ADT는 다음과 같은 곳에서는 나타날 수 없다.
				1. ADT의 인스턴스를 발생시키는 경우
				2. ADT객체를 멤버변수로 갖는 경우.
			즉, 위와 같은 경우가 나타나게 되는지를 따져보면 된다.
			먼저 따져봐야할 대상을 크게 둘로 나눠보면 "매니져클래스 그자체"와 "그의 내부클
			래스"라고 볼 수 있다.
			여기서 매니져클래스의 인스턴스는 항상 모듈매니져에 위치하고 다른데서 놓여지지
			않으므로 대상에서 제외할 수 있다.
			
			최종적으로 "내부클래스들이 커널의 다른 클래스에서 사용되는가?" 따져보면 되는
			문제라는 걸 알 수 있다.
			여러가지 문제점을 파악해본 결과 이상은 없었다.
			
히스토리:
	2011-12-25	이태훈	작성		
