
pack wrd.lang.example.part

def global()
    suits := {'Hearts', 'diamonds', 'Spades', 'Clovers'}
    values := {'Two';2, 'Three';3, 'Four';4}
    // values := {ranks[0];2, ranks[1];3, ranks[2];4} // err
    ranks := {'Two', 'Three', 'Four'}
    values := {ranks[0];2, ranks[1];3, ranks[2];4} // is this possible?
    playing := true

def card
    me(nsuit str, nrank str)
        suit = nsuit
        rank = nrank
    _suit := ''
    _rank := ''

    as() str: '$rank of suit'

def hand
    _cards str{} := {}
    _value := _aces := 0

    addCard(@card) void
        cards.add(card)
        value := global.values[card.rank]

    adjustForAce() void
        for value > 21 & aces
            value -= 10
            aces--

def deck
    me()
        for s in global.suits: for r in global.ranks: cards.add(card(s, r))
    shuffle() void: random.shuffle(deck)
    deal() void
        // return deck.pop() // err. returning something to void
        deck.pop()

    _cards str{}

aka -> sys.cons // affects to all statement inside of each classes.

main() void: with deck
    shuffle()
    deal()
