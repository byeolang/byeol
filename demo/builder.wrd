pack wrd.lang.example.builder

def building
    _floor := "One"
    _size := "Big"

    @ctor()
        buildFloor()
        buildSize()

    buildFloor() void on err: ret on notImplErr
    buildSize() void on notImplErr: ret on notImplErr

def house building
    buildFloor() void: _floor = "One"
    buildSize() void: _size = "Big"

def flat from building
    buildFloor() void: _floor = "More than one"
    buildSize() void: _size = "Small"

def complexBuilding building

def complexHouse complexBuilding
    buildFloor() void: _floor = "One"
    buildSize() void: _size = "Big and fancy"

building construcBuilding(#building)
    return building()

main() void on err
    house.print()
    flat.print()
    complex = constructBuilding(complexHouse)

    sys.cons aka c
    if complex != complexHouse: return on err
    if complex === complexHouse: return on err

