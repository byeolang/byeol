name: CI for main

on:
  push:
    branches: [ feature/docker-ci ]
  pull_request:
    branches: [ main ]

jobs:
  checking-code-format:
    name: check code format with clang-format
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        path:
          - check: 'module'
            exclude: '(leafLowparser|leafLowscanner|lowparser|lowscanner)'
    steps:
    - name: checkout repository codes
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # Cache APT packages
    - name: Cache APT packages
      uses: actions/cache@v4
      with:
        path: /var/cache/apt
        key: ${{ runner.os }}-apt-${{ hashFiles('/var/lib/apt/lists/lock') }}
        restore-keys: |
          ${{ runner.os }}-apt-

    # Cache Docker installation
    - name: Cache Docker packages
      uses: actions/cache@v4
      with:
        path: |
          /var/cache/apt/archives
          /etc/apt/keyrings/docker.asc
        key: ${{ runner.os }}-docker-packages
        restore-keys: |
          ${{ runner.os }}-docker-

    - name: install native dependencies
      run: |
        sudo apt update
        sudo apt-get install ca-certificates curl
        sudo install -m 0755 -d /etc/apt/keyrings
        sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
        sudo chmod a+r /etc/apt/keyrings/docker.asc

        echo \
          "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
          $(. /etc/os-release && echo "${UBUNTU_CODENAME:-$VERSION_CODENAME}") stable" | \
          sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
        sudo apt-get update
        
        sudo apt-get install python3 docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

    - name: run formatter 
      run: |
        cd ${{github.workspace}} 
        python3 build/builder.py format docker

    - name: check if there is a style violiations 
      run: |
        git diff > output.txt
        if [ -s output.txt ]; then
          echo "error: some codes violates our code style."
          cat output.txt
          exit 1
        fi

  build-on-linux-clang:
    needs: [checking-code-format]
    name: build on linux with clang
    runs-on: ubuntu-22.04

    steps:
    - name: checkout repository codes
      uses: actions/checkout@v4

    # Cache Bison source download
    - name: Cache Bison source
      uses: actions/cache@v4
      id: bison-source-cache
      with:
        path: bison-3.8.2.tar.gz
        key: bison-source-3.8.2

    # Cache Bison build results
    - name: Cache Bison binary
      uses: actions/cache@v4
      id: bison-binary-cache
      with:
        path: |
          /usr/local/bin/bison
          /usr/local/lib/liby.a
          /usr/local/share/bison
          /usr/local/share/man/man1/bison.1
        key: ${{ runner.os }}-bison-binary-3.8.2

    # Cache APT packages
    - name: Cache APT packages
      uses: actions/cache@v4
      with:
        path: /var/cache/apt/archives
        key: ${{ runner.os }}-apt-build-${{ hashFiles('/etc/apt/sources.list.d/**') }}
        restore-keys: |
          ${{ runner.os }}-apt-build-

    - name: install native dependencies
      run: |
        sudo apt-get update
        sudo apt install -y python3 python3-pip cmake wget flex graphviz clang clang-format clang-tidy

    - name: Download Bison source
      if: steps.bison-source-cache.outputs.cache-hit != 'true'
      run: |
        sudo wget http://ftp.gnu.org/gnu/bison/bison-3.8.2.tar.gz

    - name: Build and install Bison
      if: steps.bison-binary-cache.outputs.cache-hit != 'true'
      run: |
        tar -zxvf bison-3.8.2.tar.gz
        cd bison-3.8.2
        ./configure
        sudo make -j$(nproc)
        sudo make install
        cd ..
        sudo rm -rf bison-3.8.2

    - name: Setup Bison symlink
      run: |
        if [ -f /usr/bin/bison ]; then
          sudo mv /usr/bin/bison /usr/bin/bison-prev
        fi
        sudo ln -sf /usr/local/bin/bison /usr/bin/bison
        bison --version

    - name: build in release mode & test current codes.
      run: |
        export C=clang CXX=clang++ PYTHON=$(which python3)
        ls -l ${{github.workspace}}/module/leaf/parser/bison
        sudo $PYTHON ${{github.workspace}}/build/builder.py pub deb
        sudo $PYTHON ${{github.workspace}}/build/builder.py test

    - name: upload output files.
      uses: actions/upload-artifact@v4
      with:
        name: byeol-ubuntu-x64
        path: ${{github.workspace}}/bin/byeol-ubuntu-x64.deb

  build-on-linux-gcc:
    needs: [checking-code-format]
    name: build on linux with gcc
    runs-on: ubuntu-22.04

    steps:
    - name: checkout repository codes
      uses: actions/checkout@v4

    # Cache Bison source download (shared with clang build)
    - name: Cache Bison source
      uses: actions/cache@v4
      id: bison-source-cache
      with:
        path: bison-3.8.2.tar.gz
        key: bison-source-3.8.2

    # Cache Bison build results (different key for gcc)
    - name: Cache Bison binary
      uses: actions/cache@v4
      id: bison-binary-cache
      with:
        path: |
          /usr/local/bin/bison
          /usr/local/lib/liby.a
          /usr/local/share/bison
          /usr/local/share/man/man1/bison.1
        key: ${{ runner.os }}-bison-binary-gcc-3.8.2

    # Cache APT packages
    - name: Cache APT packages
      uses: actions/cache@v4
      with:
        path: /var/cache/apt/archives
        key: ${{ runner.os }}-apt-gcc-build
        restore-keys: |
          ${{ runner.os }}-apt-build-

    - name: install native dependencies
      run: |
        sudo apt-get update
        sudo apt install -y python3 python3-pip cmake wget flex graphviz

    - name: Download Bison source
      if: steps.bison-source-cache.outputs.cache-hit != 'true'
      run: |
        sudo wget https://ftp.gnu.org/gnu/bison/bison-3.8.2.tar.gz

    - name: Build and install Bison
      if: steps.bison-binary-cache.outputs.cache-hit != 'true'
      run: |
        tar -zxvf bison-3.8.2.tar.gz
        cd bison-3.8.2
        ./configure
        sudo make -j$(nproc)
        sudo make install
        cd ..
        sudo rm -rf bison-3.8.2

    - name: Setup Bison and remove clang
      run: |
        # Remove clang if exists
        which clang++ && sudo mv $(which clang++) /tmp || true
        
        # Setup Bison
        if [ -f /usr/bin/bison ]; then
          sudo mv /usr/bin/bison /usr/bin/bison-prev
        fi
        sudo ln -sf /usr/local/bin/bison /usr/bin/bison
        bison --version

    - name: build in release mode & test current codes.
      run: |
        export C=clang CXX=clang++ PYTHON=$(which python3)
        ls -l ${{github.workspace}}/module/leaf/parser/bison
        sudo $PYTHON ${{github.workspace}}/build/builder.py pub deb
        sudo $PYTHON ${{github.workspace}}/build/builder.py test

  build-for-wasm:
    needs: [checking-code-format]
    name: build for wasm
    runs-on: ubuntu-22.04

    steps:
    - name: checkout repository codes
      uses: actions/checkout@v4

    # Cache Bison source download (shared)
    - name: Cache Bison source
      uses: actions/cache@v4
      id: bison-source-cache
      with:
        path: bison-3.8.2.tar.gz
        key: bison-source-3.8.2

    # Cache Bison build results
    - name: Cache Bison binary
      uses: actions/cache@v4
      id: bison-binary-cache
      with:
        path: |
          /usr/local/bin/bison
          /usr/local/lib/liby.a
          /usr/local/share/bison
          /usr/local/share/man/man1/bison.1
        key: ${{ runner.os }}-bison-binary-wasm-3.8.2

    # Cache Emscripten installation
    - name: Cache Emscripten
      uses: actions/cache@v4
      with:
        path: |
          ~/.emscripten_cache
          ~/.emscripten
        key: ${{ runner.os }}-emscripten-${{ hashFiles('**/emsdk-3.1.48') }}
        restore-keys: |
          ${{ runner.os }}-emscripten-

    - name: install native dependencies
      run: |
        sudo apt-get update
        sudo apt install -y python3 python3-pip cmake wget flex graphviz clang clang-format clang-tidy

    - name: Download Bison source
      if: steps.bison-source-cache.outputs.cache-hit != 'true'
      run: |
        sudo wget https://ftp.gnu.org/gnu/bison/bison-3.8.2.tar.gz

    - name: Build and install Bison
      if: steps.bison-binary-cache.outputs.cache-hit != 'true'
      run: |
        tar -zxvf bison-3.8.2.tar.gz
        cd bison-3.8.2
        ./configure
        sudo make -j$(nproc)
        sudo make install
        cd ..
        echo $(which bison)
        sudo rm -rf bison-3.8.2

    - name: Setup Bison symlink
      run: |
        if [ -f /usr/bin/bison ]; then
          sudo mv /usr/bin/bison /usr/bin/bison-prev
        fi
        sudo ln -sf /usr/local/bin/bison /usr/bin/bison

    - name: install emscripten librires
      uses: mymindstorm/setup-emsdk@v14

    - name: verify emscripten
      run: |
        echo $(which emcc)
        emcc -v

    - name: build wasm
      run: |
        export C=clang CXX=clang++ PYTHON=$(which python3)
        ls -l ${{github.workspace}}/module/leaf/parser
        export PATH="$(dirname $(which emmake)):$PATH"
        $PYTHON ${{github.workspace}}/build/builder.py wasm

    - name: upload wasm file
      uses: actions/upload-artifact@v4
      with:
        name: byeol-wasm
        path: |
          ${{github.workspace}}/bin/byeol.js
          ${{github.workspace}}/bin/byeol.wasm

  measure-coverage:
    needs: [build-on-linux-clang]
    name: measure code coverage
    runs-on: ubuntu-22.04

    steps:
    - name: checkout repository codes
      uses: actions/checkout@v4

    # Cache Bison source download (shared)
    - name: Cache Bison source
      uses: actions/cache@v4
      id: bison-source-cache
      with:
        path: bison-3.8.2.tar.gz
        key: bison-source-3.8.2

    # Cache Bison build results
    - name: Cache Bison binary
      uses: actions/cache@v4
      id: bison-binary-cache
      with:
        path: |
          /usr/local/bin/bison
          /usr/local/lib/liby.a
          /usr/local/share/bison
          /usr/local/share/man/man1/bison.1
        key: ${{ runner.os }}-bison-binary-coverage-3.8.2

    # Cache APT packages for coverage build
    - name: Cache APT packages
      uses: actions/cache@v4
      with:
        path: /var/cache/apt/archives
        key: ${{ runner.os }}-apt-coverage-${{ hashFiles('/etc/apt/sources.list') }}
        restore-keys: |
          ${{ runner.os }}-apt-coverage-

    - name: install native dependencies
      run: |
        sudo apt-get update
        sudo apt install -y python3 python3-pip cmake wget flex graphviz clang-format clang-tidy llvm lcov

    - name: Download Bison source
      if: steps.bison-source-cache.outputs.cache-hit != 'true'
      run: |
        sudo wget https://ftp.gnu.org/gnu/bison/bison-3.8.2.tar.gz

    - name: Build and install Bison
      if: steps.bison-binary-cache.outputs.cache-hit != 'true'
      run: |
        tar -zxvf bison-3.8.2.tar.gz
        cd bison-3.8.2
        ./configure
        sudo make -j$(nproc)
        sudo make install
        cd ..
        sudo rm -rf bison-3.8.2

    - name: Setup Bison symlink
      run: |
        sudo mv /usr/bin/bison /usr/bin/bison-prev
        sudo ln -sf /usr/local/bin/bison /usr/bin/bison

    - name: build for measuring coverage
      run: |
        export C=clang CXX=clang++ PYTHON=$(which python3)
        sudo $PYTHON ${{github.workspace}}/build/builder.py cov

    - name: upload coverage report to codecov
      uses: codecov/codecov-action@v5.5.0
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ./build/cov.info

  build-on-macos:
    needs: [checking-code-format]
    name: build on macos
    runs-on: macos-15

    steps:
    - name: checkout repository codes
      uses: actions/checkout@v4

    # Cache Homebrew packages
    - name: Cache Homebrew packages
      uses: actions/cache@v4
      with:
        path: |
          ~/Library/Caches/Homebrew
          /opt/homebrew/Cellar
        key: ${{ runner.os }}-brew-${{ hashFiles('**/Brewfile') }}-cmake-wget-bison-flex-graphviz-llvm
        restore-keys: |
          ${{ runner.os }}-brew-

    # Cache Bison source download
    - name: Cache Bison source
      uses: actions/cache@v4
      id: bison-source-cache
      with:
        path: bison-3.8.2.tar.gz
        key: bison-source-3.8.2

    # Cache Bison build results for macOS
    - name: Cache Bison binary
      uses: actions/cache@v4
      id: bison-binary-cache
      with:
        path: |
          /usr/local/bin/bison
          /usr/local/lib/liby.a
          /usr/local/share/bison
          /usr/local/share/man/man1/bison.1
        key: ${{ runner.os }}-bison-binary-3.8.2

    - name: install native dependencies
      run: |
        brew unlink python && brew link --overwrite python
        brew uninstall cmake || true
        brew install cmake wget bison flex graphviz llvm
        echo 'export PATH="/opt/homebrew/opt/llvm/bin:$PATH"' >> /Users/runner/.bash_profile
        source /Users/runner/.bash_profile

    - name: Download Bison source
      if: steps.bison-source-cache.outputs.cache-hit != 'true'
      run: |
        echo "install bison"
        sudo wget http://ftp.gnu.org/gnu/bison/bison-3.8.2.tar.gz # avoid SSL network issue

    - name: Build and install Bison
      if: steps.bison-binary-cache.outputs.cache-hit != 'true'
      run: |
        tar -zxvf bison-3.8.2.tar.gz
        cd bison-3.8.2
        ./configure
        sudo make -j$(sysctl -n hw.ncpu)
        sudo make install
        cd ..

    - name: build in release mode & test current codes.
      run: |
        source /Users/runner/.bash_profile
        export PATH="$PATH:/usr/local/opt/flex/bin:/usr/local/opt/bison/bin"
        export C=clang CXX=clang++ PYTHON=$(which python3)
        ls -l ${{github.workspace}}/module/leaf/parser/bison
        $PYTHON ${{github.workspace}}/build/builder.py pub mac
        $PYTHON ${{github.workspace}}/build/builder.py test

    - name: archive to tar files
      run: tar -cvf byeol-macos-x64.tar ${{github.workspace}}/bin/

    - name: upload output files.
      uses: actions/upload-artifact@v4
      with:
        name: byeol-macos-x64
        path: byeol-macos-x64.tar

  build-on-windows:
    needs: [checking-code-format]
    name: build on windows
    runs-on: windows-latest

    steps:
    - name: checkout repository codes
      uses: actions/checkout@v4

    - name: Add msbuild to PATH
      uses: microsoft/setup-msbuild@v1.1

    # Cache Chocolatey packages
    - name: Cache Chocolatey packages
      uses: actions/cache@v4
      with:
        path: |
          C:\ProgramData\chocolatey\lib
          C:\Users\runneradmin\AppData\Local\Temp\chocolatey
        key: ${{ runner.os }}-choco-wget-unzip-7zip
        restore-keys: |
          ${{ runner.os }}-choco-

    # Cache flex/bison download
    - name: Cache flex_bison
      uses: actions/cache@v4
      id: flexbison-cache
      with:
        path: |
          ${{github.workspace}}\flex_bison\flex.exe
          ${{github.workspace}}\flex_bison\bison.exe
        key: ${{ runner.os }}-flexbison-2.5.25

    - name: install apps from choco
      run: |
        choco install -y wget unzip 7zip

    - name: get flex_bison for windows & unzip
      if: steps.flexbison-cache.outputs.cache-hit != 'true'
      run: |
        mkdir ${{github.workspace}}\flex_bison
        wget -O flex_bison\flex_bison.zip https://github.com/lexxmark/winflexbison/releases/download/v2.5.25/win_flex_bison-2.5.25.zip
        cd flex_bison
        unzip flex_bison.zip
        ren win_flex.exe flex.exe
        ren win_bison.exe bison.exe

    - name: build in release mode
      run: |
        $env:PATH = "$env:PATH;${{github.workspace}}\flex_bison"
        python ${{github.workspace}}\build\builder.py pub win

    - name: archives to zip file
      run: |
        7z a -r byeol-win-x64-portable.zip ${{github.workspace}}\bin

    - name: upload output files.
      uses: actions/upload-artifact@v4
      with:
        name: byeol-win-x64-portable
        path: byeol-win-x64-portable.zip

    - name: get advanced installer
      uses: caphyon/advinst-github-action@v2.0
      with:
        # advinst-license:
        advinst-enable-automation: 'true'

    - name: build msi installer
      shell: pwsh
      run: |
        $aipPath = "${{github.workspace}}\.github\workflows\byeol.aip";
        Write-Host "AIP: $aipPath";
        $advinst = new-object -com advancedinstaller;
        $project = $advinst.LoadProject($aipPath);
        $productDetails = $project.ProductDetails;
        $productDetails.Version = $(python ${{github.workspace}}\build\builder.py ver)
        Write-Host "Version: $productDetails.Version";
        $project.Build();

    - name: upload msi file
      uses: actions/upload-artifact@v4
      with:
        name: byeol-win-x64
        path: ${{github.workspace}}\.github\workflows\byeol-win-x64.msi

  publish-doc:
    needs: [build-on-linux-gcc, build-on-linux-clang, build-on-macos, build-on-windows, build-for-wasm]
    name: publish doc
    runs-on: ubuntu-22.04

    steps:
      - name: checkout master codes.
        uses: actions/checkout@v4

      # Cache Doxygen build
      - name: Cache Doxygen
        uses: actions/cache@v4
        id: doxygen-cache
        with:
          path: |
            /usr/local/bin/doxygen
            /usr/local/share/man/man1/doxygen.1
          key: ${{ runner.os }}-doxygen-1.9.2

      # Cache Ruby gems
      - name: Cache Ruby gems
        uses: actions/cache@v4
        with:
          path: ~/.gem
          key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}-jekyll-bundler
          restore-keys: |
            ${{ runner.os }}-gems-

      # Cache pip packages
      - name: Cache pip packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-jinja2-pygments

      - name: install native dependencies
        run: |
          sudo apt install -y graphviz python3 python3-pip ruby rubygems wget cmake flex bison libclang-dev

      - name: install doxygen 1.9.2 source
        if: steps.doxygen-cache.outputs.cache-hit != 'true'
        run: |
          wget https://github.com/doxygen/doxygen/releases/download/Release_1_9_2/doxygen-1.9.2.src.tar.gz
          tar -xzf doxygen-1.9.2.src.tar.gz
          cd doxygen-1.9.2
          cmake -DCMAKE_POLICY_VERSION_MINIMUM=3.5
          sudo make -j$(nproc) install

      - name: verify doxygen
        run: doxygen --version

      - name: install python dependencies
        run: sudo python3 -m pip install --upgrade jinja2 Pygments

      - name: install gems
        run: sudo gem install jekyll bundler

      - name: commit docs if it's different to previous commit
        run: |
          export C=clang CXX=clang++ PYTHON=$(which python3)
          sudo $PYTHON ${{github.workspace}}/build/builder.py doc
          sudo $PYTHON ${{github.workspace}}/build/builder.py pubdoc

      - name: push the commit
        uses: ad-m/github-push-action@v0.6.0
        with:
          directory: ${{github.workspace}}/build/html
          repository: byeolang/website
          github_token: ${{secrets.PAT_TOKEN}}
          branch: 'main'
